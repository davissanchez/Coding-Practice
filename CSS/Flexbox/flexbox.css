body {
  font-family: "Open Sans", sans-serif;
}

h1 {
  text-align: center;
}

#container {
  background-color: #003049;
  width: 90%;
  /* height: 500px; */
  margin: 0 auto;
  border: 5px solid #003049;
  /* this below essentially turns on flexbox properties */
  /* see notes for more conceptual stuff */
  display: flex;
  /* . 
  .*/
  flex-direction: row;
  /* . */
  /* above is default and it moves left to right. row-reverse makes the main axis go from right to left instead of left to right */
  /* . */
  /* flex-direction: row-reverse; */
  /* . */
  /* flex-direction: column; */
  /* . */
  /* flex-direction: column-reverse; */
  /* . 
  .
  .
  .
  .
  .
  .*/
  /* justify-content determines how the content is distributed along the main axis */
  /* . */
  /* justify-content: flex-start;  */
  /*above is default, puts content in whatever normal order it would be along the specified main axis, whether it's left to right, top to bottom, etc*/
  /* . */
  /* justify-content: flex-end; */
  /* pushes everything to the end of the main axis */
  /* . */
  justify-content: center;
  /* .
  . */
  /* justify-content: space-between; */
  /*spaces all elements out along the main axis and leaves no room on the edge of the container*/
  /* . */
  /* justify-content: space-around; */
  /* space around is similar to space between but they all have equal space on both sides, so items won't butt up against the edge */
  /* . */
  justify-content: space-evenly;
  /* . 
  .
  .
  .
  .
  .
  .
  .*/
  flex-wrap: wrap;
  /* flex-wrap: wrap-reverse; */
  /* instead of elements or items squishing along one main axis, they wrap into multiple rows/columns....this is when cross axis starts to become relevant */
  /* . 
  .
  .
  .
  .
  .
  .
  */
  /* align-items determines how things are distributed along the cross axis */
  /* align-items: flex-start; */
  align-items: flex-end;
  /* align-items: center; */
  /* . */
  /* align-items: baseline; */
  /* baseline aligns items based on the text and not the container */
  /* .
  .
  .
  .
  .
  .
  
  */
  /* align-content  controls or distributes space along the cross axis, but only when we have multiple rows/columns AND flex-wrap: wrap or wrap reverse
  eg if you're main axis goes left to right, it'll put your rows in different places along the y axis or space them out along the y axis accordingly*/
  /* align-content: flex-start; */
  /* align-content: flex-end; */
  /* align-content: space-between; */
  /* align-content: space-around; */
  /* align-content: center; */
}

/* .
  .
  .
  .
   */
/* align-self is similar to align-items but we don't apply it to the flex container, but rather the item or element itself....NEEDS to have align-content active!*/
div:nth-of-type(3) {
  align-self: flex-start;
  /* can also do flex-end and center */
}

#container div {
  width: 100px;
  height: 100px;
  /* max-width: 300px; */
  font-size: 4em;
  text-align: center;
  /* flex basis defines the initial size of an element along main axis before additional space is distributed or before it's added into our flex container */
  flex-basis: 200px;
  /* so when flex-direction is set to row, the flex-basis affects the width along the x axis, essentially making the width irrelevant - flex basis is useful when you may be changing between row/column as main axis and you want to make sure that the proportions are consistent along the main axis */
}

div:nth-of-type(1) {
  flex-grow: 1;
  /* flex grow accepts a unitles number and controls the amount of available space that an element should take up. same concept with flex-shrink. they  kind of tell items how fast two grow or shrink which determines how big they will get proportionally when they are taking up extra space or shrinking into smaller spaces */
  flex-shrink: 3;
}

div:nth-of-type(5) {
  flex-grow: 2;
  /* flex grow accepts a unitles number */
}

main {
  width: 80%;
  margin: 0 auto;
  border: 5px solid black;
  height: 500px;
  display: flex;
}
/* SHORTHAND FOR FLEX GROW BASIS AND SHRINK:
flex: FLEX-GROW | FLEX-SHRINK | FLEX-BASIS */
main .sidebar {
  background-color: purple;
  flex: 1 2 200px;
}
main .maincontent {
  background-color: lightblue;
  flex: 3 1 150px;
}
